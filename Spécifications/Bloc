Service : Bloc

Types : boolean, enum BlocType {Vide, MurBrique, MurMetal, Explosion}, enum BlocReward {Rien, BombUp, FireUp, WallPass, BombPass, FireSuit}

Observators :
	getType : [Bloc] -> BlocType
	getReward : [Bloc] -> BlocReward
	isDestructible : [Bloc] -> boolean
	
Constructors :
	init : BlocType x BlocReward -> [Bloc]
		pre init(t, r) require r != null AND t != null
		
Operators :
	setType : [Bloc] x BlocType -> [Bloc]
		pre setType(B, t) require t != null
	setReward : [Bloc] x BlocReward -> [Bloc]
		pre setReward(B, r) require r != null
		
Observations :
	[init]
		getType(init(type,reward)) = type
		getReward(init(type,reward)) = reward
		isDestructible(init(BlocType.Vide, reward)) = true
		isDestructible(init(BlocType.MurBrique, reward)) = true
		isDestructible(init(BlocType.MurMetal, reward)) = false
		isDestructible(init(BlocType.Explosion, reward)) = true
		
	[setType]
		getType(setType(B,type)) = type
		getReward(setType(B,type)) = getReward(B)
		isDestructible(setType(B, BlocType.Vide)) = true
		isDestructible(setType(B, BlocType.MurBrique)) = true
		isDestructible(setType(B, BlocType.MurMetal)) = false
		isDestructible(setType(B, BlocType.Explosion)) = true
		
	[setReward]
		getType(setReward(B, r)) = getType(B)
		getReward(setReward(B, r)) = r
		isDestructible(setReward(B, r)) = isDestructible(B)
